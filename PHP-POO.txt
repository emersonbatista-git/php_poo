VANTAGENS DA PROGRAMAÇÃO EM POO

* Confiavel - O isolamento entre as partes gera software seguro. Ao alterar uma parte, nenhuma outra é alterada.
* Oportuno - Ao dividir tudo em partes, varias delas podem ser desenvolvidas em paralelo.
* Manutenivel - Atualizar um software é mais facil. Uma pequena modificação vai beneficiar todas as partes que usarem o objeto
* Extensivel - O software nao é estatico. Ele deve crescer para permanecer util.
* Reutilizavel - podemos usar objetos de um sistema que criamos em outro sistema futuro.
* Natural - Mais facil de entender. Voce se preocupa mais na funcionalidade do que nos detalhes de implementação.

DEFINIÇÕES

Classe - Define os atributos e metodos comuns que serão compartilhados por um objeto

Objeto - É a instancia de uma classe. Quando eu idealizo uma classe e transformo (instancio) em objeto

Exemplo: 
Uma forma de biscoito pode fazer varias classes de biscoitos, como sabor, cor, cobertura, etc...

Abstração - Dar foco no que realmente importa quando um objeto tem varias classes, exemplo: cadastro de aluno focar em idade, sexo, endereço, etc... Para modelo focar em altura, cor do cabelo, peso, etc...


****** CRIANDO CLASSES E OBJETOS ******


****** INDEX.PHP ******

<body>
    <?php 
    require_once 'caneta.php';
    $c1 = new Caneta;
    $c1 ->cor = "Azul";
    $c1 ->ponta = 0.5;
    $c1->tampar();

    

    print_r($c1); 

    echo"</br>";

    $c2 = new Caneta;
    $c2 ->cor = "Verde";
    $c2 ->carga = 50;
    $c2->tampar();

   
    

    print_r($c2); 
    
    
    
    ?>
    
</body>


****** CANETA.PHP *******

<body>
    <?php 
    class Caneta {
        var $modelo;
        var $cor;
        var $ponta;
        var $carga;
        var $tampada;

        function rabiscar() {
            if ($this->tampada == true) {
                echo "<p>ERRO! Não posso rabiscar";   
            }
            
            else {
                echo "<p>Estou rabiscando...</p>";
            }


            

        }

        function tampar () {
            $this->tampada = true;

        }

        function destampar() {
            $this ->tampada = false;
        }


    }
    
    
    
    
    ?>

    
</body>


******* MUDANDO A VISIBILIDADE ********

- Diagrama de Classe
  Classe começa com letra maiusculas
  Atributo com letra minusculas
  Metedo com letra minusculas e com parenteses

+ public    - a classe atual e todas as outras classes podem ter acesso
- privado   - Somente a classe atual
# protegido - A classe atual e todas as suas sub-classes


***** METODOS ESPECIAIS *******
get - Metodo acessor, para ter acesso ao determinado atributo mantendo a segunrança entre eles.

set - Metodo modificadores, modificar determinado atributo mantendo a segunrança entre eles.

__construct    - Metodo construtor, criar novo registro com informações padroes.



****** EXEMPLO PRATICO ********

DIAGRAMA DE CLASSE

ContaBanco                 }  Noma da classe
---------------
+ numConta
# tipo
- dono                     } Atributos
- saldo
- status
---------------
+ abrirConta()
+ fecharConta()
+ depositar()              } Metodos ( ou Funcoes)
+ sacar()
+ pagarMensal()


Observações:

tipo            - Ira aceitar apenas CP ou CC
abrirConta()    - Se a conta está aberta status (true), se está fechada status (false)
                - Abrir conta o status vira true, e ganha R$ 50,00 CC e CP ganha 150,00

fecharConta()   - Nao pode ter credito e nem debito, status false

depositar()     - Status tem que estar true

sacar()         - Status true e tem que ter saldo, e verificar se nao está sacabdo mais que o saldo

pagarMensa()    - Status trus, CC paga 12,00 e CP 20,00

Teremos tambem os metodos especiais
getnumConta()
setnumConta()
gettipo()
settipo()
getdono()
setdono()
getsaldo()
setsaldo()
getstatus()
setstatus()
__construct    Padrao status false e saldo zero






ALGORITIMO                                                            
Classe ContaBanco
 // Atributos
publico numConta: Inteiro                                                                                                                             
protegido tipo: Caracter
privado dono: Caracter                                                                                                                             
privado saldo: Real                                                                                                                             
privado status: Logico   
 // Metodos   
publico Metodo abrirConta(t:caractere)
     setTipo(t)
     setStatus(verdadeiro)
   se (t = "CC") entao
     saldo = 50
   senao se (t = "CP") entao
     saldo = 150
   Fimse
FimMetodo

publico Metodo fecharConta()
      se (saldo > 0) entao
        Escreva("Conta com dinheiro")
      senao se (saldo < 0) entao
        Escreva("Conta em debito")
      senao
       setStatus(false)
FimMetodo

publico Metodo depositar(v:Real)
    se (status = verdadeiro) entao
       setSaldo(getsaldo() + v)
    senao
     Escreva ("Impossivel depositar")
   FimSe
FimMetodo

publico Metodo sacar(v:Real)
   se (status = verdadeiro) entao
       se (saldo > v) entao
          saldo = saldo - v
       senao
         Escreva ("Saldo insificiente")
       Fimse
   senao
    Escreva("Impossivel sacar")
   FimSe
FimMetodo

publico Metodo pagarMensal()
   var v: Real
     se (tipo = "CC") entao
      v = 12
     senao se (tipo = "CP") entao
      v = 20
     FimSe
  se (status = verdadeiro) entao
    se (saldo > v) entao
      saldo = saldo - v
    senao
     escreva ("Saldo insifuciente")
    FimSe
  senao
   escreva ("Impossivel pagar")
  FimSe
FimMetodo  

  // Metodos Especiais                                                                                                                            
publico Metodo Construtor()
     saldo = 0
     status = falso   
 FimMetodo

publico Metodo setNumConta(n:inteiro)
   numConta = n
 FimMetodo
publico Metodo getNumConta()
   retorne numConta 
    
publico Metodo setTipo(t:caractere)
   tipo = t
 FimMetodo
publico Metodo getTipo()
   retorne Tipo   
 FimMetodo 

publico Metodo setDono(d:caractere)
   dono = d
 FimMetodo
publico Metodo getDono()
   retorne dono   
 FimMetodo

publico Metodo setSaldo(s:Real)
   saldo = s
 FimMetodo
publico Metodo getSaldo()
   retorne saldo   
 FimMetodo

publico Metodo setStatus(s:Logico)
   status = s
 FimMetodo
publico Metodo getStatus()
   retorne status   
 FimMetodo                                                                                                                                                                    
                                                                 
                                                                                                                             
FimClasse       


PHP

                                                                                                                      
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             

                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             



 










