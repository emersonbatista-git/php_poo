VANTAGENS DA PROGRAMAÇÃO EM POO

* Confiavel - O isolamento entre as partes gera software seguro. Ao alterar uma parte, nenhuma outra é alterada.
* Oportuno - Ao dividir tudo em partes, varias delas podem ser desenvolvidas em paralelo.
* Manutenivel - Atualizar um software é mais facil. Uma pequena modificação vai beneficiar todas as partes que usarem o objeto
* Extensivel - O software nao é estatico. Ele deve crescer para permanecer util.
* Reutilizavel - podemos usar objetos de um sistema que criamos em outro sistema futuro.
* Natural - Mais facil de entender. Voce se preocupa mais na funcionalidade do que nos detalhes de implementação.

DEFINIÇÕES

Classe - Define os atributos e metodos comuns que serão compartilhados por um objeto

Objeto - É a instancia de uma classe. Quando eu idealizo uma classe e transformo (instancio) em objeto

Exemplo: 
Uma forma de biscoito pode fazer varias classes de biscoitos, como sabor, cor, cobertura, etc...

Abstração - Dar foco no que realmente importa quando um objeto tem varias classes, exemplo: cadastro de aluno focar em idade, sexo, endereço, etc... Para modelo focar em altura, cor do cabelo, peso, etc...


****** CRIANDO CLASSES E OBJETOS ******


****** INDEX.PHP ******

<body>
    <?php 
    require_once 'caneta.php';
    $c1 = new Caneta;
    $c1 ->cor = "Azul";
    $c1 ->ponta = 0.5;
    $c1->tampar();

    

    print_r($c1); 

    echo"</br>";

    $c2 = new Caneta;
    $c2 ->cor = "Verde";
    $c2 ->carga = 50;
    $c2->tampar();

   
    

    print_r($c2); 
    
    
    
    ?>
    
</body>


****** CANETA.PHP *******

<body>
    <?php 
    class Caneta {
        var $modelo;
        var $cor;
        var $ponta;
        var $carga;
        var $tampada;

        function rabiscar() {
            if ($this->tampada == true) {
                echo "<p>ERRO! Não posso rabiscar";   
            }
            
            else {
                echo "<p>Estou rabiscando...</p>";
            }


            

        }

        function tampar () {
            $this->tampada = true;

        }

        function destampar() {
            $this ->tampada = false;
        }


    }
    
    
    
    
    ?>

    
</body>


******* MUDANDO A VISIBILIDADE ********

- Diagrama de Classe
  Classe começa com letra maiusculas
  Atributo com letra minusculas
  Metedo com letra minusculas e com parenteses

+ public    - a classe atual e todas as outras classes podem ter acesso
- privado   - Somente a classe atual
# protegido - A classe atual e todas as suas sub-classes


***** METODOS ESPECIAIS *******
get - Metodo acessor, para ter acesso ao determinado atributo mantendo a segunrança entre eles.

set - Metodo modificadores, modificar determinado atributo mantendo a segunrança entre eles.

__construct    - Metodo construtor, criar novo registro com informações padroes.



****** EXEMPLO PRATICO ********

DIAGRAMA DE CLASSE

ContaBanco                 }  Noma da classe
---------------
+ numConta
# tipo
- dono                     } Atributos
- saldo
- status
---------------
+ abrirConta()
+ fecharConta()
+ depositar()              } Metodos ( ou Funcoes)
+ sacar()
+ pagarMensal()


Observações:

tipo            - Ira aceitar apenas CP ou CC
abrirConta()    - Se a conta está aberta status (true), se está fechada status (false)
                - Abrir conta o status vira true, e ganha R$ 50,00 CC e CP ganha 150,00

fecharConta()   - Nao pode ter credito e nem debito, status false

depositar()     - Status tem que estar true

sacar()         - Status true e tem que ter saldo, e verificar se nao está sacabdo mais que o saldo

pagarMensa()    - Status trus, CC paga 12,00 e CP 20,00

Teremos tambem os metodos especiais
getnumConta()
setnumConta()
gettipo()
settipo()
getdono()
setdono()
getsaldo()
setsaldo()
getstatus()
setstatus()
__construct    Padrao status false e saldo zero






******* CONTA EM BANCO *********
                                                           
Classe ContaBanco
 // Atributos
publico numConta: Inteiro                                                                                                                             
protegido tipo: Caracter
privado dono: Caracter                                                                                                                             
privado saldo: Real                                                                                                                             
privado status: Logico   
 // Metodos   
publico Metodo abrirConta(t:caractere)
     setTipo(t)
     setStatus(verdadeiro)
   se (t = "CC") entao
     saldo = 50
   senao se (t = "CP") entao
     saldo = 150
   Fimse
FimMetodo

publico Metodo fecharConta()
      se (saldo > 0) entao
        Escreva("Conta com dinheiro")
      senao se (saldo < 0) entao
        Escreva("Conta em debito")
      senao
       setStatus(false)
FimMetodo

publico Metodo depositar(v:Real)
    se (status = verdadeiro) entao
       setSaldo(getsaldo() + v)
    senao
     Escreva ("Impossivel depositar")
   FimSe
FimMetodo

publico Metodo sacar(v:Real)
   se (status = verdadeiro) entao
       se (saldo > v) entao
          saldo = saldo - v
       senao
         Escreva ("Saldo insificiente")
       Fimse
   senao
    Escreva("Impossivel sacar")
   FimSe
FimMetodo

publico Metodo pagarMensal()
   var v: Real
     se (tipo = "CC") entao
      v = 12
     senao se (tipo = "CP") entao
      v = 20
     FimSe
  se (status = verdadeiro) entao
    se (saldo > v) entao
      saldo = saldo - v
    senao
     escreva ("Saldo insifuciente")
    FimSe
  senao
   escreva ("Impossivel pagar")
  FimSe
FimMetodo  

  // Metodos Especiais                                                                                                                            
publico Metodo Construtor()
     saldo = 0
     status = falso   
 FimMetodo

publico Metodo setNumConta(n:inteiro)
   numConta = n
 FimMetodo
publico Metodo getNumConta()
   retorne numConta 
    
publico Metodo setTipo(t:caractere)
   tipo = t
 FimMetodo
publico Metodo getTipo()
   retorne Tipo   
 FimMetodo 

publico Metodo setDono(d:caractere)
   dono = d
 FimMetodo
publico Metodo getDono()
   retorne dono   
 FimMetodo

publico Metodo setSaldo(s:Real)
   saldo = s
 FimMetodo
publico Metodo getSaldo()
   retorne saldo   
 FimMetodo

publico Metodo setStatus(s:Logico)
   status = s
 FimMetodo
publico Metodo getStatus()
   retorne status   
 FimMetodo                                                                                                                                                                    
                                                                 
                                                                                                                             
FimClasse       





***** PILARES POO ****

E H P ( Encapsulamento Herença Polimorfismo )

* Encapsulamento - Ocultar partes independesntes da implementação, permitindo contruir partes invisiveis ao mundo exterior. Exemplo de uma pilha, o conteudo interno nao tem acesso ao externo e vice e versa. E nao importa como a pilha trabalha por dentro o que importa é o resultado final.
Para o programa conversar com com as capsulas utilizamos as interfaces. Que sao um alista de serviços fornecidos por um componente. É o contato com o mundo exterior, que define o que pode ser feito com um objeto dessa classe.
Encapsular nao é obrigatorio, mas é uma boa pratica para pruduzir Classes mais eficientes.
Vantagens em encapsular:
- Tornar mudanças invisiveis
- Facilitar a reutilização do codigo
- Reduzir efeitos colaterais

Como encapsular?

Interface nao tem atributos, tem apenas metodos.

  <<interface>>                                             <<Classe>>
   Controlador                                              ControleRemoto  
=================                                          ---------------- //Todos os atributos serão privados, para nao serem alterados
+ligar()                                                    - volume
+desligar()                                                 - ligado
+abrirMenu()                                                - tocando
+fecharMenu()                                              ---------------- // Metodos 
+maisVolume()                                              +ligar()   
+menosVolume()                                             +desligar() 
+ligarMudo()                                               +abrirMenu()
+desligarMudo()                                            +fecharMenu() 
+play()                                                    +maisVolume()
+pause()                                                   +menosVolume()
                                                           +menosVolume()
                                                           +ligarMudo()
                                                           +desligarMudo() 
                                                           +play()
                                                           +pause()
                                                           +setVolume()
                                                           +getVolume()
                                                           +setLigado()                                                                    
                                                           +getLigado()                                                                  
                                                           +setTocando()                                                                  
                                                           +getTocando()                                                                   
                                                                           

******  CONTROLE REMOTO *********

interface Controlador
//Metodos Abstratos - Metodos abstratos significa que nao serão desenvolvidos aqui, apenas iremos acionar a função.

publico abstrato Metodo ligar()
publico abstrato Metodo desligar()
publico abstrato Metodo abrirMenu()
publico abstrato Metodo fecharMenu()
publico abstrato Metodo maisVolume()
publico abstrato Metodo menosVolume()
publico abstrato Metodo ligarMudo()
publico abstrato Metodo desligarMudo()
publico abstrato Metodo play()
publico abstrato Metodo pause()




FimInterface     

classe ControleRemoto implementa Controlador

//Atributos

publico inteiro volume
publico logico ligado
publico logico tocando

//Metodos Especiais
publico Metodo Construtor()
  volume - 50
  ligado = falso
  tocando = falso
FimMetodo
publico Metodo getvolume()
retorne volume
FimMetodo
publico Metodo getligado()
retorne ligado
FimMetodo
publico Metodo getTocando()
retorne Tocando
FimMetodo
publico Metodo setvolume(v:inteiro)
 volume = v
FimMetodo
publico Metodo setligado(l: logico)
 ligado = l
FimMetodo
publico Metodo setTocando(t: logico)
 tocando = t
FimMetodo

FimClasse

classe ControleRemoto implementa Controlador
  //Subscrevendo Metodos, retira a palavra abstrato

publico  Metodo ligar()
   setligado(verdadeiro)
   FimMetodo
publico  Metodo desligar()
   setligado(falso)
    FimMetodo
publico  Metodo abrirMenu()
   Escreva(getLigado())
   Escreva(getVolume())
    Para i = 0 ate getVolume() passo 10 faca
      escreva("|")
    FimPara
     escreva (getTocando())
   FimMetodo
publico  Metodo fecharMenu()
   Escreva ("Fechando Menu...)
   FimMetodo
publico  Metodo maisVolume()
  Se (getLigado()) entao
    setVolume(getVolume() + 1)
  FimSe

 FimMetodo
publico  Metodo menosVolume()
 Se (getLigado()) entao
    setVolume(getVolume() - 1)
  FimSe

 FimMetodo

publico  Metodo ligarMudo()
  Se (getLigado() e getVolume() > 0) entao
   setVolume(0)
  FimSe

publico  Metodo desligarMudo()
  Se (getLigado() e getVolume() = 0) entao
   setVolume(50)
  FimSe
publico  Metodo play()
  Se (getLigado() e nao getTocando()) entao
    setTocando(verdadeiro)
  FimSe

publico  Metodo pause()
 Se (getLigado() e  getTocando()) entao
    setTocando(falso)
  FimSe


FimClasse





*****************************  LUTA EFC *************************************************************************************************************

DIAGRAMA DE CLASSES
1ª Classe

Lutador
------------------
 // Atributos
-nome
-nacionalidade
-idade
-altura
-peso
-categoria
-vitorias
-derrotas
-empates 
------------------
 // Metodos
+apresentar()
+status()
+ganharLuta()
+perderLuta()
+empatarLuta()
------------------
 // Metodos Especiais
contrutor
get
set



2ª Classe

Luta
----------------------
-desafiado
-desafiante
-rounds
-aprovada
----------------------
marcarLuta()
lutar()




******* ALGORITIMO ********

Classe Lutador
 //Atributos

privado nome: Caracter
privado nacionalidade: Caracter
privado idade: Inteiro
privado altura: Real
privado peso: Real
privado categoria: Caracter
privado vitorias: Inteiro
privado derrotas: Inteiro
privado empates: Inteiro 

//Metodos

publico metodo apresentar()

fim metodo

publico metodo status()

fim metodo

publico metodo ganharLuta()

fim metodo

publico metodo perderLuta()

fim metodo

publico metodo empatarLuta()

fim metodo

// Metodos Especiais
publico metodo construtor(no:Caractere, na:Caractere, id:Inteiro, al:Real, pe:Real, vi:Inteiro, de:Inteiro,em:Inteiro)
	nome = no
	nacionalidade = na
	idade = id
	altura = al
	setPeso(pe)
	vitorias = vi
	derrotas = de
	empates = em
fim metodo

publico metodo getNome()
    retorne nome
fim metodo

publico metodo getNacionalidade()
    retorne nacionalidade
fim metodo

publico metodo getIdade()
    retorne idade
fim metodo

publico metodo getAltura()
    retorne altura
fim metodo

publico metodo getPeso()
    retorne peso
fim metodo

publico metodo getVitorias()
    retorne vitorias
fim metodo

publico metodo getDerrotas()
    retorne derrotas
fim metodo

publico metodo getEmpates()
    retorne empates
fim metodo

publico metodo SetNome(no:Caracter)
    nome = no
Fim metodo

publico metodo SetNacionaliodade(na:Caracter)
    nocionalidade = na
Fim metodo

publico metodo SetIdade(id: Inteiro)
    idade = id
Fim metodo

publico metodo SetAltura(al:Real)
    altura = al
Fim metodo

publico metodo SetVitorias(vi:Inteiro)
    vitorias = vi
Fim metodo

publico metodo SetDerrotas(de:Inteiro)
    derrotas = de
Fim metodo

publico metodo SetEmpates(em:Inteiro)
    empates = em
Fim metodo

publico metodo SetPeso(pe:Real)
    peso = pe
    setCategoria()
Fim metodo

privado metodo SetCategoria()
    se(peso<52.2)entao
      categoria = "Invalido"
    senao se (peso <=70.3)entao
      categoria = "Leva"
    senao se (peso<=83.9)entao
      categoria = "Medio"
    senao se (peso<=120.2)entao
      categoria = "Pesado"
    senao
      categoria = "Invalido"
   fim Se


Fim metodo

publico metodo ganharLuta()
  setVitorias(getVitorias() + 1)
fim metodo

publico metodo perderLuta()
  setVitorias(getDerrotas() + 1)
fim metodo

publico metodo empatarLuta()
  setVitorias(getEmpates() + 1)
fim metodo

publico metodo apresentar()
   Escreva("Lutador: ", getNome())
   Escreva("Origem: ", getNacionalidade())
   Escreva(getIdade(), " anos")
   Escreva("Pesando ", getPeso(), "Kg")
   Escreva("Ganhou: " getVitorias())
   Escreva("Perdeu: " getDerrotas())
   Escreva("Empatou: " getEmpates())
fim metodo

publico metodo status()
  Escreva(getNome())
  Escreva("é um peso ", getCategoria())
  Escreva(getVitorias(), " "vitorias")
  Escreva(getDerrotas(), " derrotas")
  Escreva( getEmpates(), "empates")
fim metodo

fimClasse



//CLASSE LUTA

Classe Luta
  //Atributos
privado desafiado: Lutador
privado desafiante: Lutador
privado rouns: Inteiro
privado aprovada: logico

// Metodos
publico metodo marcarluta(l1, l2: Lutador)
    se (l1.getCategoria() = l2.getCategoria()) e (l1<>l2) entao
      aprovado = verdadeiro
      desafiado = l1
      desafiante = l2
   senao
      aprovado = falso
      desafiado = null
      desafiante = null
   fimse
fim metodo


publico metodo lutar()
   se (aprovada)
    desafiado.apresentar()
    desafiante.apresentar()
    vencedor = aleatorio(0..2)
       escolha (vencedor)

         caso 0: //Empate
           escreva("Empatou!")
           desafiado.empatarLuta()
           desafiante.empatarLuta()

         caso 1: //Ganhou Desafiado
            escreva (desafiado.getNome())
            desafiado.ganharLuta()
            desafiante.perderLuta()

         caso 2: //Ganhou Desafiante
            escreva (desafiaante.getNome())
            desafiado.perderLuta()
            desafiante.ganharLuta()

        Fimescolha


   senao
    escreva ("Luta não pode acontecer")
   fimse

fim metodo

//Metodos Especiais
publico metodo setDesafiado(dd: Lutador)
    desafiado = dd
fim metodo

publico metodo getDesafiado()
    retorne desafiado
fim metodo

publico metodo setDesfiante(de: Lutador)
    desafiante = de
fim metodo

publico metodo getDesafiante()
    retorne desafiante
fim metodo


publico metodo setRounds(ro: inteiro)
    rounds = ro
fim metodo

publico metodo getRouns()
    retorne rounds
fim metodo

publico metodo setAprovada(ap: logico)
    aprovada = ap
fim metodo

publico metodo getAprovada()
    retorne aprovada
fim metodo

FimClasse


// PROGRAMA PRINCIPAL

L: VETOR[0..5]
L[0] = novo lutador("Pretty Boy", "Franca", 31, 1.75, 68.9, 11, 3, 1)

L[1] = novo lutador("Putsscript", "Brasil", 29, 1.68, 57.8, 14, 2, 3)

L[2] = novo lutador("SnapShadow", "EUA", 35, 1.65, 80.9, 12, 2, 1)

L[3] = novo lutador("Dead Code", "Australia", 28, 1.93, 81.6, 13, 0, 2)

L[4] = novo lutador("Ufocobol", "Brasil", 37, 1.70, 119.3, 5, 4, 3)

L[5] = novo lutador("Nerdaard", "EUA", 30, 1.81, 105.7, 12, 2, 4)

L[0].apresentar()
L[2].status()
L[3].getCategoria()
L[1].ganhatLuta()
L[0].empatarLuta()

UEC01 = novo Luta()
UEC01.marcarLuta(l[0], l[1])
UEC.lutar()



********  AULA 9 EXERCICIO **********

    Pessoa                               Livro                    
----------------                     -----------------
-nome                                 -titulo
-idade                                -autor
-sexo                                 -totPaginas
----------------                      -pagAtual
+fazerAniversario()                   -aberto 
                                      -leitor
                                    -------------------
                                      detalhes()


<<Interface>>  
  Publicacao
=================
+abrir()
+fechar()
+folear()
+avancarPag()
+voltarPag()


************* HERENÇA ************

Permite basear umanova classe na definição de uma outra classe previamente existente.
A herença será aplicada tanto para as caracteristicas quanto para os comportamentos.

                               Diagrama de classe

                                    Pessoa
                                    ----------
                                    -nome
                                    -idade
                                    -sexo
                                    ----------
                                    +fazerAniversario()
                                        /\
                                        |
                                        |
Aluno ->->->->->->->->->->->->      funcionario <-<-<-<-<-<-<-<-     Professor
-----------                         --------------                   ------------
-matr                               -setor                           -especialidade
-curso                              -trabalhando                     -salario
-----------                         --------------                   --------------
+cancelarMatr()                     +mudarTrabalho()                 +receberAum()


=====  Algoritimo =======

Classe Pessoa                                     Classe Aluno estende Pessoa                                                            
  //Atributos                                      //Atributos
privado nome: caracter                            privado: matr:Inteiro                           
privado idade: Inteiro                            privado: curso: Caracter                        
privado sexo: Caracter                             //Metodos
 //Metodos                                        publico metodo cancelarMatr() 
publico metodo fazerAniv()                         (...)
(...)                                             FimMetodo
  fimMetodo                                        //Metodos Especiais
 //Metodos Especiais                              publico metodo getMatr()
publico metodo getNome()                           (...)
(...)                                             FimMetodo
FimMetodo                                         publico metodo getCurso()   
publico metodo getIdade()                         (...)
(...)                                             FimMetodo
FimMetodo                                         publico metodo setMatr()
publico metodo getSexo()                          (...)
(...)                                             FimMetodo
FimMetodo                                         publico metodo setCurso()
publico metodo setNome()                          (...)
(...)                                             FimMetodo
FimMetodo
publico metodo setIdade()
(...)
FimMetodo
publico metodo setSexo()
(...)
FimMetodo

FimClasse



Classe Professor estende Pessoa                    Classe Funcionario estende Pessoa                                                            
  //Atributos                                      //Atributos
privado especialidade: caracter                    privado setor:Caracter                           
privado salario: Inteiro                           privado trabalhando: Logico                        
                                                  //Metodos
 //Metodos                                        publico metodo mudarTrabalho() 
publico metodo ReceberAum()                         (...)
(...)                                             FimMetodo
FimMetodo                                         //Metodos Especiais
 //Metodos Especiais                              publico metodo getSetor()
publico metodo getEspecialidade()                   (...)
(...)                                             FimMetodo
FimMetodo                                         publico metodo getTrabalhando()   
publico metodo getSalario()                         (...)
(...)                                             FimMetodo
FimMetodo                                         publico metodo setSetor()
                                                    (...)
                                                   FimMetodo
                                                  publico metodo setTrabalhando()
publico metodo setEspecialidadee()                  (...)
(...)                                             FimMetodo
FimMetodo
publico metodo setSalario()
(...)
FimMetodo

FimClasse



========= PROGRAMA PRINCIPAL ===========

p1=new Pessoa()
p2=new Aluno()
p3=new Professor()
p4-new Funcionario()

p1.setNome("Pedro")
p2.setNome("Maria")
p3.setNome("Claudio")
p4.SetNome("Fabiana")

p2.setCurso("Informatica")
p3.setSalario("2500.75")
p4.setSetor("Estoque")

p1.receberAum(550.20)     //Não poderia, p1 nao tem salario, somente o Professor tem metodo de receber aumento.

***** NEVAGACAO PELA HERANÇA ******

A -> AA -> AAA       Neste caso A seria a Raiz(Superclasse ou Progenitora), AA (Filha de A e Superclasse de AAA e AAB) e AAA e AAB sao filhas de AA)
        -> AAB
                     Ancestral seria a analise da AAB para A
                     Descencedente seria de A para AAB
                     Analisando a arvore de cima para baixo é Especialização
                     Analisando de baixo para cima seria Generalização

TIPOS de Herança (Dois exemplos)

Herença de implementação - Considerado hertança pobre, é o tipo mais simples. Herda as caracteristicas da mãe e nao acrescenta mais nenhuma
Pessoa(nome, idade, sexo, fazeraniversario()) -> visitante

Herança para diferença - Mais completa, herda as caracteristicas da mae e acrescenta outras caracteristicas.
Pessoa(nome, idade, sexo, fazeraniversario()) -> aluno (matricula, curso, pagarMensalidade()) -> Bolsista(bolsa, renovaBolsa(), pagarMesalidade) Obs. Podemos sobrepor um metodo.

**** Abstrato e final *****
Classe Abstrata - Nao pode ser instanciada. Só pode servir como progenitora. Não pode gerar objetos.
Metodo Abstrato - Declarado, mas nao implementado na progenitora. Só pode ser colocado dentro de uma interface oou uma classe abstrata
Classe Final - Não pode ser herdada por outra classe. Obrigatoriamente folha, nao pode ter filhos.
Metodo Final - Nao pode ser sobrescritos pelas suas sub-classes. Obrigatoriamente herdado.

Classe abstrata Pessoa                                     Classe Aluno estende Pessoa                                                            
  //Atributos                                      //Atributos
privado nome: caracter                            privado: matr:Inteiro                           
privado idade: Inteiro                            privado: curso: Caracter                        
privado sexo: Caracter                             //Metodos
 //Metodos                                        publico metodo cancelarMatr() 
publico metodo final fazerAniv()                         (...)
(...)                                             FimMetodo
  fimMetodo                                        //Metodos Especiais
 //Metodos Especiais                              publico metodo getMatr()
publico metodo getNome()                           (...)
(...)                                             FimMetodo
FimMetodo                                         publico metodo getCurso()   
publico metodo getIdade()                         (...)
(...)                                             FimMetodo
FimMetodo                                         publico metodo setMatr()
publico metodo getSexo()                          (...)
(...)                                             FimMetodo
FimMetodo                                         publico metodo setCurso()
publico metodo setNome()                          (...)
(...)                                             FimMetodo
FimMetodo                                         //Herança para diferença, herdou e implementou outras caracteristicas
publico metodo setIdade()
(...)
FimMetodo
publico metodo setSexo()
(...)
FimMetodo

FimClasse



Classe visitante estende Pessoa                                  Classe Bolsista estende Aluno
 //Metodos                                                       privado bolsa: inteiro
publico metodo final fazerAniv()                                 publico metodo RonovarBolsa()
(...)                                                            fimmetodo
  fimMetodo                                                      @sobrepor
 //Metodos Especiais                                             publico metodo PagarMensalidade()
publico metodo getNome()                                         fimmetodo
(...)                                                            // Bolsista recebe as caracteristicas de Aluno e tambem de Pessoa, já que Aluno recebe de pessoa
FimMetodo                                                        //Bolsista paga mensalidade diferente de aluno, por isso sobrepor a herdada
publico metodo getIdade()                     
(...)                                             
FimMetodo                                         
publico metodo getSexo()                          
(...)                                            
FimMetodo                                         
publico metodo setNome()                          
(...)                                             
FimMetodo                                         
publico metodo setIdade()
(...)
FimMetodo
publico metodo setSexo()
(...)
FimMetodo

FimClasse
                                                                                                               
                                        
//Herança Implementação                                           
                                                
//Programa Principal
p1 = novo Pessoa() - Neste caso nao irá funcionar, Pessoa é abstrata nao recebe objeto.
v1 - novo Visitante() - Neste caso funciona, Visitante herda pessoa mas apenas as carcteristicas e nao o tipo.

































 
   
   
                                            
                                                                                                                             
                                                                                                                             
                                                                                                                             

                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             



 










