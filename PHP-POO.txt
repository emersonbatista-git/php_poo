VANTAGENS DA PROGRAMAÇÃO EM POO

* Confiavel - O isolamento entre as partes gera software seguro. Ao alterar uma parte, nenhuma outra é alterada.
* Oportuno - Ao dividir tudo em partes, varias delas podem ser desenvolvidas em paralelo.
* Manutenivel - Atualizar um software é mais facil. Uma pequena modificação vai beneficiar todas as partes que usarem o objeto
* Extensivel - O software nao é estatico. Ele deve crescer para permanecer util.
* Reutilizavel - podemos usar objetos de um sistema que criamos em outro sistema futuro.
* Natural - Mais facil de entender. Voce se preocupa mais na funcionalidade do que nos detalhes de implementação.

DEFINIÇÕES

Classe - Define os atributos e metodos comuns que serão compartilhados por um objeto

Objeto - É a instancia de uma classe. Quando eu idealizo uma classe e transformo (instancio) em objeto

Exemplo: 
Uma forma de biscoito pode fazer varias classes de biscoitos, como sabor, cor, cobertura, etc...

Abstração - Dar foco no que realmente importa quando um objeto tem varias classes, exemplo: cadastro de aluno focar em idade, sexo, endereço, etc... Para modelo focar em altura, cor do cabelo, peso, etc...


****** CRIANDO CLASSES E OBJETOS ******


****** INDEX.PHP ******

<body>
    <?php 
    require_once 'caneta.php';
    $c1 = new Caneta;
    $c1 ->cor = "Azul";
    $c1 ->ponta = 0.5;
    $c1->tampar();

    

    print_r($c1); 

    echo"</br>";

    $c2 = new Caneta;
    $c2 ->cor = "Verde";
    $c2 ->carga = 50;
    $c2->tampar();

   
    

    print_r($c2); 
    
    
    
    ?>
    
</body>


****** CANETA.PHP *******

<body>
    <?php 
    class Caneta {
        var $modelo;
        var $cor;
        var $ponta;
        var $carga;
        var $tampada;

        function rabiscar() {
            if ($this->tampada == true) {
                echo "<p>ERRO! Não posso rabiscar";   
            }
            
            else {
                echo "<p>Estou rabiscando...</p>";
            }


            

        }

        function tampar () {
            $this->tampada = true;

        }

        function destampar() {
            $this ->tampada = false;
        }


    }
    
    
    
    
    ?>

    
</body>


******* MUDANDO A VISIBILIDADE ********

- Diagrama de Classe
  Classe começa com letra maiusculas
  Atributo com letra minusculas
  Metedo com letra minusculas e com parenteses

+ public    - a classe atual e todas as outras classes podem ter acesso
- privado   - Somente a classe atual
# protegido - A classe atual e todas as suas sub-classes


***** METODOS ESPECIAIS *******
get - Metodo acessor, para ter acesso ao determinado atributo mantendo a segunrança entre eles.

set - Metodo modificadores, modificar determinado atributo mantendo a segunrança entre eles.

__construct    - Metodo construtor, criar novo registro com informações padroes.



 










