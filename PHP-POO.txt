VANTAGENS DA PROGRAMAÇÃO EM POO

* Confiavel - O isolamento entre as partes gera software seguro. Ao alterar uma parte, nenhuma outra é alterada.
* Oportuno - Ao dividir tudo em partes, varias delas podem ser desenvolvidas em paralelo.
* Manutenivel - Atualizar um software é mais facil. Uma pequena modificação vai beneficiar todas as partes que usarem o objeto
* Extensivel - O software nao é estatico. Ele deve crescer para permanecer util.
* Reutilizavel - podemos usar objetos de um sistema que criamos em outro sistema futuro.
* Natural - Mais facil de entender. Voce se preocupa mais na funcionalidade do que nos detalhes de implementação.

DEFINIÇÕES

Classe - Define os atributos e metodos comuns que serão compartilhados por um objeto

Objeto - É a instancia de uma classe. Quando eu idealizo uma classe e transformo (instancio) em objeto

Exemplo: 
Uma forma de biscoito pode fazer varias classes de biscoitos, como sabor, cor, cobertura, etc...

Abstração - Dar foco no que realmente importa quando um objeto tem varias classes, exemplo: cadastro de aluno focar em idade, sexo, endereço, etc... Para modelo focar em altura, cor do cabelo, peso, etc...


****** CRIANDO CLASSES E OBJETOS ******


****** INDEX.PHP ******

<body>
    <?php 
    require_once 'caneta.php';
    $c1 = new Caneta;
    $c1 ->cor = "Azul";
    $c1 ->ponta = 0.5;
    $c1->tampar();

    

    print_r($c1); 

    echo"</br>";

    $c2 = new Caneta;
    $c2 ->cor = "Verde";
    $c2 ->carga = 50;
    $c2->tampar();

   
    

    print_r($c2); 
    
    
    
    ?>
    
</body>


****** CANETA.PHP *******

<body>
    <?php 
    class Caneta {
        var $modelo;
        var $cor;
        var $ponta;
        var $carga;
        var $tampada;

        function rabiscar() {
            if ($this->tampada == true) {
                echo "<p>ERRO! Não posso rabiscar";   
            }
            
            else {
                echo "<p>Estou rabiscando...</p>";
            }


            

        }

        function tampar () {
            $this->tampada = true;

        }

        function destampar() {
            $this ->tampada = false;
        }


    }
    
    
    
    
    ?>

    
</body>


******* MUDANDO A VISIBILIDADE ********

- Diagrama de Classe
  Classe começa com letra maiusculas
  Atributo com letra minusculas
  Metedo com letra minusculas e com parenteses

+ public    - a classe atual e todas as outras classes podem ter acesso
- privado   - Somente a classe atual
# protegido - A classe atual e todas as suas sub-classes


***** METODOS ESPECIAIS *******
get - Metodo acessor, para ter acesso ao determinado atributo mantendo a segunrança entre eles.

set - Metodo modificadores, modificar determinado atributo mantendo a segunrança entre eles.

__construct    - Metodo construtor, criar novo registro com informações padroes.



****** EXEMPLO PRATICO ********

DIAGRAMA DE CLASSE

ContaBanco                 }  Noma da classe
---------------
+ numConta
# tipo
- dono                     } Atributos
- saldo
- status
---------------
+ abrirConta()
+ fecharConta()
+ depositar()              } Metodos ( ou Funcoes)
+ sacar()
+ pagarMensal()


Observações:

tipo            - Ira aceitar apenas CP ou CC
abrirConta()    - Se a conta está aberta status (true), se está fechada status (false)
                - Abrir conta o status vira true, e ganha R$ 50,00 CC e CP ganha 150,00

fecharConta()   - Nao pode ter credito e nem debito, status false

depositar()     - Status tem que estar true

sacar()         - Status true e tem que ter saldo, e verificar se nao está sacabdo mais que o saldo

pagarMensa()    - Status trus, CC paga 12,00 e CP 20,00

Teremos tambem os metodos especiais
getnumConta()
setnumConta()
gettipo()
settipo()
getdono()
setdono()
getsaldo()
setsaldo()
getstatus()
setstatus()
__construct    Padrao status false e saldo zero






ALGORITIMO                                                            
Classe ContaBanco
 // Atributos
publico numConta: Inteiro                                                                                                                             
protegido tipo: Caracter
privado dono: Caracter                                                                                                                             
privado saldo: Real                                                                                                                             
privado status: Logico   
 // Metodos   
publico Metodo abrirConta(t:caractere)
     setTipo(t)
     setStatus(verdadeiro)
   se (t = "CC") entao
     saldo = 50
   senao se (t = "CP") entao
     saldo = 150
   Fimse
FimMetodo

publico Metodo fecharConta()
      se (saldo > 0) entao
        Escreva("Conta com dinheiro")
      senao se (saldo < 0) entao
        Escreva("Conta em debito")
      senao
       setStatus(false)
FimMetodo

publico Metodo depositar(v:Real)
    se (status = verdadeiro) entao
       setSaldo(getsaldo() + v)
    senao
     Escreva ("Impossivel depositar")
   FimSe
FimMetodo

publico Metodo sacar(v:Real)
   se (status = verdadeiro) entao
       se (saldo > v) entao
          saldo = saldo - v
       senao
         Escreva ("Saldo insificiente")
       Fimse
   senao
    Escreva("Impossivel sacar")
   FimSe
FimMetodo

publico Metodo pagarMensal()
   var v: Real
     se (tipo = "CC") entao
      v = 12
     senao se (tipo = "CP") entao
      v = 20
     FimSe
  se (status = verdadeiro) entao
    se (saldo > v) entao
      saldo = saldo - v
    senao
     escreva ("Saldo insifuciente")
    FimSe
  senao
   escreva ("Impossivel pagar")
  FimSe
FimMetodo  

  // Metodos Especiais                                                                                                                            
publico Metodo Construtor()
     saldo = 0
     status = falso   
 FimMetodo

publico Metodo setNumConta(n:inteiro)
   numConta = n
 FimMetodo
publico Metodo getNumConta()
   retorne numConta 
    
publico Metodo setTipo(t:caractere)
   tipo = t
 FimMetodo
publico Metodo getTipo()
   retorne Tipo   
 FimMetodo 

publico Metodo setDono(d:caractere)
   dono = d
 FimMetodo
publico Metodo getDono()
   retorne dono   
 FimMetodo

publico Metodo setSaldo(s:Real)
   saldo = s
 FimMetodo
publico Metodo getSaldo()
   retorne saldo   
 FimMetodo

publico Metodo setStatus(s:Logico)
   status = s
 FimMetodo
publico Metodo getStatus()
   retorne status   
 FimMetodo                                                                                                                                                                    
                                                                 
                                                                                                                             
FimClasse       


PHP


***** PILARES POO ****

E H P ( Encapsulamento Herença Polimorfismo )

* Encapsulamento - Ocultar partes independesntes da implementação, permitindo contruir partes invisiveis ao mundo exterior. Exemplo de uma pilha, o conteudo interno nao tem acesso ao externo e vice e versa. E nao importa como a pilha trabalha por dentro o que importa é o resultado final.
Para o programa conversar com com as capsulas utilizamos as interfaces. Que sao um alista de serviços fornecidos por um componente. É o contato com o mundo exterior, que define o que pode ser feito com um objeto dessa classe.
Encapsular nao é obrigatorio, mas é uma boa pratica para pruduzir Classes mais eficientes.
Vantagens em encapsular:
- Tornar mudanças invisiveis
- Facilitar a reutilização do codigo
- Reduzir efeitos colaterais

Como encapsular?

Interface nao tem atributos, tem apenas metodos.

  <<interface>>                                             <<Classe>>
   Controlador                                              ControleRemoto  
=================                                          ---------------- //Todos os atributos serão privados, para nao serem alterados
+ligar()                                                    - volume
+desligar()                                                 - ligado
+abrirMenu()                                                - tocando
+fecharMenu()                                              ---------------- // Metodos 
+maisVolume()                                              +ligar()   
+menosVolume()                                             +desligar() 
+ligarMudo()                                               +abrirMenu()
+desligarMudo()                                            +fecharMenu() 
+play()                                                    +maisVolume()
+pause()                                                   +menosVolume()
                                                           +menosVolume()
                                                           +ligarMudo()
                                                           +desligarMudo() 
                                                           +play()
                                                           +pause()
                                                           +setVolume()
                                                           +getVolume()
                                                           +setLigado()                                                                    
                                                           +getLigado()                                                                  
                                                           +setTocando()                                                                  
                                                           +getTocando()                                                                   
                                                                           

CODIGO

interface Controlador
//Metodos Abstratos - Metodos abstratos significa que nao serão desenvolvidos aqui, apenas iremos acionar a função.

publico abstrato Metodo ligar()
publico abstrato Metodo desligar()
publico abstrato Metodo abrirMenu()
publico abstrato Metodo fecharMenu()
publico abstrato Metodo maisVolume()
publico abstrato Metodo menosVolume()
publico abstrato Metodo ligarMudo()
publico abstrato Metodo desligarMudo()
publico abstrato Metodo play()
publico abstrato Metodo pause()




FimInterface     

classe ControleRemoto implementa Controlador

//Atributos

publico inteiro volume
publico logico ligado
publico logico tocando

//Metodos Especiais
publico Metodo Construtor()
  volume - 50
  ligado = falso
  tocando = falso
FimMetodo
publico Metodo getvolume()
retorne volume
FimMetodo
publico Metodo getligado()
retorne ligado
FimMetodo
publico Metodo getTocando()
retorne Tocando
FimMetodo
publico Metodo setvolume(v:inteiro)
 volume = v
FimMetodo
publico Metodo setligado(l: logico)
 ligado = l
FimMetodo
publico Metodo setTocando(t: logico)
 tocando = t
FimMetodo

FimClasse

classe ControleRemoto implementa Controlador
  //Subscrevendo Metodos, retira a palavra abstrato

publico  Metodo ligar()
   setligado(verdadeiro)
   FimMetodo
publico  Metodo desligar()
   setligado(falso)
    FimMetodo
publico  Metodo abrirMenu()
   Escreva(getLigado())
   Escreva(getVolume())
    Para i = 0 ate getVolume() passo 10 faca
      escreva("|")
    FimPara
     escreva (getTocando())
   FimMetodo
publico  Metodo fecharMenu()
   Escreva ("Fechando Menu...)
   FimMetodo
publico  Metodo maisVolume()
  Se (getLigado()) entao
    setVolume(getVolume() + 1)
  FimSe

 FimMetodo
publico  Metodo menosVolume()
 Se (getLigado()) entao
    setVolume(getVolume() - 1)
  FimSe

 FimMetodo

publico  Metodo ligarMudo()
  Se (getLigado() e getVolume() > 0) entao
   setVolume(0)
  FimSe

publico  Metodo desligarMudo()
  Se (getLigado() e getVolume() = 0) entao
   setVolume(50)
  FimSe
publico  Metodo play()
  Se (getLigado() e nao getTocando()) entao
    setTocando(verdadeiro)
  FimSe

publico  Metodo pause()
 Se (getLigado() e  getTocando()) entao
    setTocando(falso)
  FimSe


FimClasse



 
   
   
                                            
                                                                                                                             
                                                                                                                             
                                                                                                                             

                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             
                                                                                                                             



 










